name: API Publish Docker image

on:
  push:
    branches:
      - fix_auth_prod
  workflow_run:
    workflows:
      - "Release"
    types:
      - completed
    branches:
      - master
    paths:
      - 'apps/backend/**'
      - 'prisma/**'
      - '.github/workflows/release-docker-api.yml'
      - 'package-lock.json'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: eastolfi/santoral-api

jobs:
  build-and-push-api:
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password
      # that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install dependencies
        run: npm ci

      - name: Create Prisma env file
        run: |
          touch .env
          echo DATABASE_URL=${{ secrets.DATABASE_URL }} >> .env

      - name: Create env file
        run: |
          touch apps/backend/.env.local
          echo AUTH0_ISSUER_URL=${{secrets.AUTH0_ISSUER}} >> apps/backend/.env.local
          echo AUTH0_AUDIENCE=${{secrets.AUTH0_AUDIENCE}} >> apps/backend/.env.local
          echo AUTH0_CLIENT_ID=${{secrets.AUTH0_CLIENT_ID}} >> apps/backend/.env.local

      - name: Create certificates for NgInx
        run: |
          touch apps/backend/src/assets/certs/cert.pem
          echo "${{secrets.API_NEST_CERT}}" >> apps/backend/src/assets/certs/cert.pem
          touch apps/backend/src/assets/certs/key.pem
          echo "${{secrets.API_NEST_CERT_KEY}}" >> apps/backend/src/assets/certs/key.pem

      - name: Build API
        run: npx nx build-bundled backend

      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels
      # that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step.
      # The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`.
      # If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          file: apps/backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # Inject the secret so it can be used on Dockerfile with --mount
          secrets: |
            "DATABASE_URL=${{ secrets.DATABASE_URL }}"
