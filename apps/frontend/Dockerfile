# FROM node:18 AS build

# # Get the arguments from the command line
# # ARG NGX_API_URL

# # Set the environment variables
# # ENV NGX_API_URL=$NGX_API_URL
# ENV NG_APP_AUTH0_DOMAIN=dev-rdurf54b.eu.auth0.com
# ENV NG_APP_AUTH0_CLIENT_ID=sYSWiNxCFI2GdzfKZJrXjjh06GI7zdZj
# ENV NG_APP_API_BASE_URL=http://backend/api
# # ENV NG_APP_API_BASE_URL=/api/v1
# # ENV NG_APP_API_BASE_URL=https://192.168.1.119:5443

# WORKDIR /app

# COPY package*.json ./
# # COPY prisma prisma
# RUN npm ci

# RUN npx nx build frontend

# This file is generated by Nx.
#
# Build the docker image with `npx nx docker-build frontend`.
# Tip: Modify "docker-build" options in project.json to change docker build args.
#
# Run the container with `docker run -p 3000:3000 -t frontend`.
# FROM docker.io/node:lts-alpine
FROM nginx:alpine
# https://hub.docker.com/r/mpineault/nginx-alpine-ssl

# ENV HOST=0.0.0.0
# ENV PORT=4200

# WORKDIR /app

# RUN addgroup --system frontend && \
#           adduser --system -G frontend frontend

# COPY dist/apps/frontend frontend
COPY dist/apps/frontend /usr/share/nginx/html
# COPY --from=build /app/dist/apps/frontend /usr/share/nginx/html
# RUN chown -R frontend:frontend .

# You can remove this install step if you build with `--bundle` option.
# The bundled output will include external dependencies.
# RUN npm --prefix frontend --omit=dev -f install

# FROM nginx:alpine

COPY apps/frontend/nginx/nginx.conf /etc/nginx/conf.d/default.conf
COPY apps/frontend/nginx/certs/nginx.crt /etc/ssl/certs/nginx.crt
COPY apps/frontend/nginx/certs/nginx.key /etc/ssl/private/nginx.key
# COPY --from=build /usr/src/app/dist/ng-santoral /usr/share/nginx/html

EXPOSE 80
EXPOSE 443
